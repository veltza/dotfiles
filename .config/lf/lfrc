# Required tools - lf:
# bsdtar (libarchive)
# coreutils
# dash
# gunzip (gzip)
# trash-cli
# unrar
# unxz (xz)
# unzip
# unzstd (zstd)
# vidir (moreutils)
# curl (optional)
# dragon-drop (optional) - https://github.com/mwh/dragon
# fuse-archive (optional) - https://github.com/google/fuse-archive
# fzf (optional)
# hexedit (optional)
# wget (optional)
# wmctrl (optional)
# xclip (optional)
#
# Required tools - previewer:
# bsdtar (libarchive)
# catdoc
# convert (imagemagick)
# docx2txt
# glow - https://github.com/charmbracelet/glow
# gunzip (gzip)
# mediainfo or exiftool
# odt2txt
# pdftotext
# tree
# unxz (xz)
# unzstd (zstd)
# bat (optional)
# chafa (optional)
# highlight (optional)
# transmission-show (optional)
# ueberzug (optional)

# Basic settings
set noautoquit
set drawbox
set icons
set ignorecase
set preview
set previewer ~/.config/lf/preview
set scrolloff 4
set tagfmt "\033[33m%s\033[0m"
set cursorpreviewfmt "\033[7;90;40m"
set sixel

# Shell settings
set shell dash
set shellopts '-eu'
set ifs "\n"

# Custom Functions
cmd on-cd &{{
    # Show current directory in window title
    case "$PWD" in
        $HOME) title=$USER ;;
        $HOME*) title="~${PWD#$HOME}" ;;
        *) title=$PWD ;;
    esac
    printf "\033]0;$title - lf\007" > /dev/tty

    # Show git branch in prompt
    set +e
    warning="" && [ $LF_LEVEL -ne 1 ] && warning="%S\033[41;1mWarning: You're in a nested lf instance!\033[0m"
    fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%d\033[0m\033[1m%f\033[0m"
    branch="$(git symbolic-ref --short HEAD 2>/dev/null)" || \
    branch="tags/$(git describe --tags --exact-match HEAD 2>/dev/null)" || \
    #branch="$(git describe --contains HEAD 2>/dev/null)" || \
    branch="$(git name-rev --name-only --no-undefined --always HEAD 2>/dev/null)"
    [ -n "$branch" ] && { lf -remote "send $id set promptfmt \"$fmt \033[33;1mî‚  $branch\033[0m$warning\""; return; }
    lf -remote "send $id set promptfmt \"$fmt$warning\""

    # Add current directory to zoxide database or increment its rank
    zoxide add "$PWD"
}}

cmd on-quit ${{
    set +e
    echo "$PWD" > "${XDG_RUNTIME_DIR:-$HOME}/lf-last-dir-path"
    awk '$1 == "fuse-archive" {
        a["040"]=" "; a["011"]="\t"; a["134"]="\\"; # a["012"]="\n"
        for (c in a) gsub("\\\\" c, a[c], $2)
        print $2
        }' /etc/mtab |
    while read -r mntdir; do
        fusermount -u "$mntdir" && rmdir "$mntdir"
    done
}}

cmd quit-and-cd &{{
    echo "$PWD" > "${LF_CD_FILE:-/dev/null}"
    lf -remote "send $id quit"
}}

cmd open ${{
    set -f
    test -L "$f" && f=$(readlink -f "$f")
    case "$f" in
        *.md5|*.md5sum) chksum='md5sum';;
        *.sha256|*.sha256sum) chksum='sha256sum';;
        *.sha512|*.sha512sum) chksum='sha512sum';;
        *) chksum='';;
    esac
    if [ -n "$chksum" ]; then
        printf '\nChecking %s checksum(s) ...\n' $chksum
        set +e; $chksum -c "$f"
        set -e; printf 'Press enter to continue'; read -r ans
        exit 0
    fi
    if command -v fuse-archive >/dev/null; then
        case "$f" in
            *.7z|*.deb|*.iso|*.jar|*.rar|*.tar|*.tar.??|*.tar.???|*.tbz|*.tbz2|*.tgz|*.txz|*.tzst|*.zip)
                mntdir="$f-fusearchive"
                if [ ! -d "$mntdir" ]; then
                    mkdir "$mntdir"
                    fuse-archive "$f" "$mntdir"
                fi
                mntdir="$(printf '%s' "$mntdir" | sed 's/\\/\\\\/g;s/"/\\"/g')"
                lf -remote "send $id cd \"$mntdir\""
                lf -remote "send $id reload"
                exit ;;
        esac
    fi
    case $(file --mime-type "$f" -b) in
        text/*|application/json|inode/x-empty) $EDITOR "$f";;
        application/x-*executable) setsid "$f" > /dev/null 2> /dev/null & ;;
        *) for f in $fx; do setsid xdg-open "$f" > /dev/null 2> /dev/null & done;;
    esac
}}

cmd open-with ${{
    set -f
    [ $# -le 0 ] && exit 0

    [ "$1" != "sudo" ] && cmd=$1 || eval cmd=\${$#}
    case "$cmd" in
        hexedit) for f in $fx; do "$@" "$f"; done ;;
        hexyl|mediainfo) "$@" $fx | less ;;
        nano|nvim|vim) "$@" $fx ;;
        md5sum|sha256sum|sha512sum) lf -remote "send $id checksum $cmd" ;;
        sudoedit) lf -remote "send $id $cmd" ;;
        sudo) exit 0 ;;
        pkexec)
            [ $# -gt 1 ] || exit 0
            cmd=$(printf '%s $fx >/dev/null 2>/dev/null' "$*" | tr '\n' ' ')
            lf -remote "send $id &$cmd" ;;
        *)
            cmd=$(printf 'setsid %s $fx >/dev/null 2>/dev/null &' "$*" | tr '\n' ' ')
            lf -remote "send $id &$cmd" ;;
    esac
}}

cmd open-config ${{
    configmenu="${XDG_CONFIG_HOME:-"$HOME/.config"}/configmenu"
    [ -e "$configmenu" ] || exit 0
    set +e; f=$(grep -v '^#\|^\s*$' "$configmenu" | sed 's/:.*//' | fzf --reverse)
    set -e
    [ -n "$f" ] || exit 0
    $EDITOR "$(grep "^$f:" "$configmenu" | sed -e 's/.*://' -e "s|~|$HOME|")"
}}

cmd open-new-terminal &{{
    for e in $(env | grep "^lf_"); do eval "unset ${e%%=*}"; done
    unset f fs fx id lf LF_LEVEL LF_CD_FILE
    setsid st -d "$PWD" &
}}

# Check that we have permissions to every file and directory before
# copying/moving files, and if we don't have permissions to all files,
# don't copy/move any files.
cmd paste-check &{{
    if [ ! -e ~/.local/share/lf/files ] || [ "$(wc -l < ~/.local/share/lf/files)" -le 1 ]; then
        lf -remote "send $id echoerr paste: no file in copy/cut buffer"
        exit 0
    fi
    perm=''
    mode=''
    while read -r line; do
        if [ -n "$mode" ] && [ ! -e "$(realpath -- "$line")" ]; then
            continue
        fi
        case "$mode" in
            copy)
                if [ ! -r "$(realpath -- "$line")" ]; then
                    perm='sudo'
                    break
                fi ;;
            move)
                if [ ! -w "$(dirname -- "$(realpath -- "$line")")" ]; then
                    perm='sudo'
                    break
                fi ;;
            *)
                mode=$line ;;
        esac
    done < ~/.local/share/lf/files
    if [ "$perm" = 'sudo' ] || [ ! -w "$PWD" ]; then
        lf -remote "send $id echoerr paste: cannot $mode file(s): permission denied"
        exit 0
    fi
    lf -remote "send $id paste"
}}

# y (select for copy) and P to paste soft-link
# d (select for cut) and P to paste hard-link
cmd link %{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echoerr no files to link"
        exit 0
    fi
    case "$mode" in
        # symbolically copy mode is indicating a soft link
        copy) ln -sr -t . -- "$@";;
        # while a move mode is indicating a hard link
        move) ln -t . -- "$@";;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

cmd mkdir &{{
    args=''; while [ $# -gt 0 ]; do args="$args \"$(printf '%s' "$1" | sed 's/\\/\\\\/g;s/"/\\"/g')\""; shift; done
    lf -remote "send $id mkitem \"mkdir -p\" $args"
}}

cmd mkfile &{{
    args=''; while [ $# -gt 0 ]; do args="$args \"$(printf '%s' "$1" | sed 's/\\/\\\\/g;s/"/\\"/g')\""; shift; done
    lf -remote "send $id mkitem touch $args"
}}

cmd sudomkdir &{{
    args=''; while [ $# -gt 0 ]; do args="$args \"$(printf '%s' "$1" | sed 's/\\/\\\\/g;s/"/\\"/g')\""; shift; done
    lf -remote "send $id mkitem \"sudo mkdir -p\" $args"
}}

cmd sudomkfile &{{
    args=''; while [ $# -gt 0 ]; do args="$args \"$(printf '%s' "$1" | sed 's/\\/\\\\/g;s/"/\\"/g')\""; shift; done
    lf -remote "send $id mkitem \"sudo touch\" $args"
}}

cmd mkitem ${{
    set -f
    cmd=$(printf '%s' "$1" | tr ' ' '\n')
    shift
    if [ $# -le 0 ]; then
        lf -remote "send $id echo Aborted!"
        exit 0
    fi
    f=$(printf '%s' "$*" | tr '\n' ' ')
    s=$(printf '%s' "$f" | sed 's/\\/\\\\/g;s/"/\\"/g');
    if [ -e "$f" ]; then
        echo $cmd | grep -q "dir" && m="directory" || m="file"
        m=$(printf "Cannot create %s '%s': File or directory already exists!" "$m" "$s")
        lf -remote "send $id select \"$s\""
        lf -remote "send $id echoerr \"$m\""
        exit 0
    fi
    set +e
    if ! error=$($cmd -- $f 2>&1); then
        if printf '%s' "$error" | grep -q '[Pp]ermission denied'; then
            echo $cmd | grep -q "dir" && m="directory" || m="file"
            m=$(printf "Cannot create %s '%s': Permission denied!" "$m" "$s")
        else
            m=$(printf '%s' "$error" | head -n 1)
        fi
        lf -remote "send $id echoerr \"$m\""
        exit 0
    fi
    lf -remote "send reload"
    lf -remote "send $id select \"$s\""
}}

cmd chmod &{{
    args=''; while [ $# -gt 0 ]; do args="$args \"$(printf '%s' "$1" | sed 's/\\/\\\\/g;s/"/\\"/g')\""; shift; done
    lf -remote "send $id chitem chmod $args"
}}

cmd chown &{{
    args=''; while [ $# -gt 0 ]; do args="$args \"$(printf '%s' "$1" | sed 's/\\/\\\\/g;s/"/\\"/g')\""; shift; done
    lf -remote "send $id chitem \"sudo chown\" $args"
}}

cmd sudochmod &{{
    args=''; while [ $# -gt 0 ]; do args="$args \"$(printf '%s' "$1" | sed 's/\\/\\\\/g;s/"/\\"/g')\""; shift; done
    lf -remote "send $id chitem \"sudo chmod\" $args"
}}

cmd chitem ${{
    set -f
    cmd=$(printf '%s' "$1" | tr ' ' '\n')
    shift
    if [ $# -le 0 ]; then
        lf -remote "send $id echo Aborted!"
        exit 0
    fi
    set +e
    if ! error=$($cmd "$@" -- $fx 2>&1); then
        lf -remote "send $id echoerr $(printf '%s' "$error" | head -n 1)"
        exit 0
    fi
    lf -remote "send reload"
    lf -remote "send $id unselect"
    lf -remote "send $id echo Done"
}}

cmd bulkrename ${{
    [ -z "$fx" ] && exit
    cwd=$(printf '%s' "$PWD" | sed -e 's/[]\/$*.^[]/\\&/g')
    printf '%s\n' "$fx" | sed -e "s|^$cwd/||" | vidir -
    lf -remote "send reload"
    lf -remote "send $id unselect"
}}

cmd trash ${{
    set -f
    # Single quotes in a filename can mess up command arguments,
    # so the last character in last argument should be user input.
    [ $# -le 0 ] && ans="n" || eval ans=\${$#}
    ans=${ans#"${ans%?}"}
    if [ "$ans" = "y" ] || [ "$ans" = "Y" ]; then
        trash-put -- $fx
        #lf -remote "send clear"
        lf -remote "send reload"
        lf -remote "send $id echo Done"
    fi
}}

cmd trash_put &{{
    set -f
    n=$(printf '%s\n' "$fx" | wc -l)
    if [ $n -eq 1 ]; then
        fx=$(printf '%s' "$fx" | sed -e "s/ /<space>/g")
        lf -remote "send $id push :trash<space>'$fx'<space>?<space>[y/N]<space>"
    else
        lf -remote "send $id push :trash<space>$n<space>items?<space>[y/N]<space>"
    fi
}}

cmd trash_restore ${{
    set -f
    if [ $(trash-list | grep -F $PWD | wc -l) -gt 0 ] && [ "$PWD" != "/" ]; then
        echo "Trash restore"
        trash-restore
        lf -remote "send reload"
    else
        trash-restore
        lf -remote "send $id echo No files trashed from current dir."
    fi
}}

cmd fzf_jump ${{
    header="Jump to location"
    if [ "$PWD" = "$HOME" ]; then
        if command -v fd >/dev/null; then
            res="$(fd --max-depth=4 --follow -H -E .backups -E .cache -E .git -E .mozilla -E .thunderbird -E .windows | fzf --reverse --header="$header")"
        else
            res="$(find -L . -maxdepth 4 \(  -path './.backups' -o -path './.cache' -o -path '*/.git' -o -name '.gitignore' -o -path './.mozilla' -o -path './.thunderbird' -o -path './.windows' \) -prune -o -print 2> /dev/null | cut -b3- | fzf --reverse --header="$header")"
        fi
    elif printf '%s' "$PWD" | grep -q $HOME; then
        if command -v fd >/dev/null; then
            res="$(fd --follow -H -E .git | fzf --reverse --header="$header")"
        else
            res="$(find -L . \( -path '*/.git' -o -name '.gitignore' \) -prune -o -print 2> /dev/null | cut -b3- | fzf --reverse --header="$header")"
        fi
    else
        res="$(find . -maxdepth 2 \( -path '*/.git' -o -name '.gitignore' \) -prune -o -print 2> /dev/null | cut -b3- | fzf --reverse --header="$header")"
    fi
    [ -z "$res" ] && exit 0
    [ -d "$res" ] && cmd="cd" || cmd="select"
    res=$(printf '%s' "$res" | sed 's/\\/\\\\/g;s/"/\\"/g')
    lf -remote "send $id $cmd \"$res\""
}}

cmd sudoedit ${{
    set -f
    set +e
    [ -n "${XDG_RUNTIME_DIR:-}" ] && tmpdir=$XDG_RUNTIME_DIR || tmpdir=${TMPDIR:-/tmp}
    tmp="$(mktemp $tmpdir/lferror.XXXXXXXX)"
    if ! sudoedit $fx 2> $tmp; then
        lf -remote "send $id echoerr $(head -n 1 $tmp)"
        cat $tmp
    fi
    rm $tmp
}}

cmd suedit ${{
    set -f;
    sudo $EDITOR $fx
}}

cmd checksum &{{
    set -f
    [ $# -le 0 ] && exit 0

    case "$1" in
        md5sum) chktype="MD5" ;;
        sha256sum) chktype="SHA256" ;;
        sha512sum) chktype="SHA512" ;;
        *) lf -remote "send $id echoerr Unknown checksum!"
           exit 0 ;;
    esac
    n=$(printf '%s\n' "$fx" | wc -l)
    if [ $n -eq 1 ]; then
        [ "$PWD" = "$(dirname -- "$fx")" ] && fx=$(basename -- "$fx")
        if [ -d "$fx" ]; then
            s=$(printf "%s: '%s' is a directory" "$chktype" "$fx" | sed 's/\\/\\\\/g;s/"/\\"/g');
            lf -remote "send $id echo \"$s\""
        else
            lf -remote "send $id echo Computing $chktype checksum ..."
            s=$(printf '%s: %s' "$chktype" "$($1 -- $fx)" | sed 's/"/\\"/g');
            lf -remote "send $id echo \"$s\""
        fi
    else
        lf -remote "send $id checksums $1 $chktype"
    fi
}}

cmd checksums ${{
    set -f
    printf '\nComputing %s checksums ...\n' "$2"
    for f in $fx; do
        [ "$PWD" = "$(dirname -- "$f")" ] && f=$(basename -- "$f")
        if [ -d "$f" ]; then
            printf "'%s' is a directory\n" "$f"
        else
            printf '%s\n' "$($1 -- $f)"
        fi
    done
    printf 'Press enter to continue'; read -r ans
}}

cmd md5 checksum md5sum
cmd md5sum md5
cmd sha256 checksum sha256sum
cmd sha256sum sha256
cmd sha512 checksum sha512sum
cmd sha512sum sha512

cmd unarchive-to &{{
    set -f
    f=$(printf '%s' "$fx" | head -n 1)
    [ -d "$f" ] && exit 0

    f=$(basename -- "$f")
    case "$f" in
        *.tar.bz|*.tar.bz2|*.tar.gz|*.tar.xz|*.tar.zst)
            f=$(printf '%s' "$f" | sed -e 's/\.tar\.[[:alnum:]]\{2,3\}$//') ;;
        *.7z|*.deb|*.gz|*.iso|*.jar|*.rar|*.tar|*.tbz|*.tbz2|*.tgz|*.txz|*.tzst|*.xz|*.zip|*.zst)
            f=$(printf '%s' "$f" | sed -e 's/\.[[:alnum:]]\{2,4\}$//') ;;
        *.AppImage|*.appimage)
            if [ ! -x "$f" ]; then
                lf -remote "send $id echoerr AppImage is not executable : cannot extract files!"
                exit 0
            fi
            f=$(printf '%s' "$f" | sed -e 's/\.[[:alnum:]]\{8\}$//') ;;
        *)  lf -remote "send $id echoerr Unsupported format!"
            exit 0 ;;
    esac
    f=$(printf '%s' "$f" | sed -e "s/ /<space>/g")
    lf -remote "send $id push :unarchive<space>selected<space>file<space>into<space>directory:<space>$f"
}}

cmd unarchive-here &{{
    set -f
    f=$(printf '%s' "$fx" | head -n 1)
    [ -d "$f" ] && exit 0

    f=$(basename -- "$f")
    case "$f" in
        *.tar.bz|*.tar.bz2|*.tar.gz|*.tar.xz|*.tar.zst) ;;
        *.7z|*.deb|*.gz|*.iso|*.jar|*.rar|*.tar|*.tbz|*.tbz2|*.tgz|*.txz|*.tzst|*.xz|*.zip|*.zst) ;;
        *.AppImage|*.appimage)
            if [ ! -x "$f" ]; then
                lf -remote "send $id echoerr AppImage is not executable : cannot extract files!"
                exit 0
            fi ;;
        *)  lf -remote "send $id echoerr Unsupported format!"
            exit 0 ;;
    esac
    lf -remote "send $id push :unarchive<space>selected<space>file<space>here?<space>[Y/n]<space>"
}}

cmd unarchive ${{
    set -f
    f=$(printf '%s' "$fx" | head -n 1)
    if [ $# -lt 4 ]; then
        lf -remote "send $id echo Aborted!"
        exit 0
    elif [ "$4" = "[Y/n]" ]; then
        [ $# -lt 5 ] && ans="y" || ans=$5
        [ "$ans" != "y" ] && [ "$ans" != "Y" ] && exit 0
        targetdir="."
    elif [ $# -lt 5 ]; then
        lf -remote "send $id echo Aborted!"
        exit 0
    else
        shift 4
        targetdir=$(printf '%s' "$*" | tr '\n' ' ')
        case "$f" in
            *.AppImage|*.appimage) ;;
            *) mkdir -p -- $targetdir
        esac
    fi
    oldfiles=$(ls --group-directories-first -A)
    case "$f" in
        *.7z|*.deb|*.iso|*.jar|*.tar|*.tar.*|*.tbz|*.tbz2|*.tgz|*.txz|*.tzst)
            bsdtar -xvf "$f" -C "$targetdir" ;;
        *.rar)
            unrar x $f $targetdir ;;
        *.zip)
            unzip $f -d $targetdir ;;
        *.zst)
            unzstd $f --output-dir-flat $targetdir ;;
        *.gz|*.xz)
            if [ "$targetdir" != "." ]; then
                cp -- $f $targetdir
                cd -- $targetdir
                f=$(basename -- "$f")
            fi
            case "$f" in
                *.gz) gunzip -- $f ;;
                *) unxz -- $f ;;
            esac
            [ "$targetdir" != "." ] && cd -
            ;;
        *.AppImage|*.appimage)
            if [ -e "squashfs-root" ]; then
                lf -remote "send $id echoerr \'squashfs-root\' directory or file already exists : cannot extract files!"
                exit 0
            fi
            $f --appimage-extract
            [ "$targetdir" != "." ] && mv -- squashfs-root $targetdir
            ;;
        *)
            lf -remote "send $id echoerr Unsupported format!"
            exit 0
            ;;
    esac
    lf -remote "send reload"
    lf -remote "send $id unselect"
    if [ "$targetdir" != "." ]; then
        # Select the target directory
        targetdir=$(realpath -- $targetdir)
        targetdir=$(printf '%s' "$targetdir" | sed 's/\\/\\\\/g;s/"/\\"/g');
        lf -remote "send $id select \"$targetdir\""
    else
        # Toggle extracted files and dirs and select the first item
        count=0
        for n in $(ls --group-directories-first -A); do
            for o in $oldfiles; do
                [ "$n" = "$o" ] && break
            done
            if [ "$n" != "$o" ]; then
                count=$(($count+1))
                n=$(printf '%s' "$n" | sed 's/\\/\\\\/g;s/"/\\"/g');
                lf -remote "send $id toggle \"$n\""
                [ $count -eq 1 ] && lf -remote "send $id select \"$n\""
            fi
        done
        [ $count -eq 1 ] && lf -remote "send $id unselect"
    fi
    lf -remote "send $id echo Done"
}}

# Compress files
cmd compress ${{
    set -f
    verbose='v' # v or empty

    # get extension and mode
    ext=$1
    mode='relative' && [ -n "${2:-}" ] && mode='flat'
    case "$ext" in
        tar|tar.gz|tar.xz|tar.zst|zip) ;;
        *)  lf -remote "send $id echoerr Unknown compression format!"
            exit 0 ;;
    esac

    printf "\nCompressing following object(s) using the $mode mode:\n"

    if [ "$mode" = "relative" ]; then
        # convert absolute paths to relative paths
        files='' err=0
        for f in $fx; do
            f=${f#$PWD/}
            printf '%s' "$f"
            case "$f" in
                '/'*) printf ' (*)\n'; err=1 ;;
                *)    printf '\n' ;;
            esac
            [ -z "$files" ] && files=$f || files=$(printf '%s\n%s' "$files" "$f")
        done
        printf '\n'

        if [ $err -gt 0 ]; then
            printf "Error: (*) Some objects can't be found in current working directory or its subdirectories.\n"
            printf 'Try flat mode: '
            case "$ext" in
                tar)     printf 'aT. ' ;;
                tar.gz)  printf 'aG. ' ;;
                tar.xz)  printf 'aX. ' ;;
                tar.zst) printf 'aS. ' ;;
                *)       printf 'aZ. ' ;;
            esac
            printf 'It compresses files and directories without a path.\n'
            printf 'Press enter to continue'
            read -r ans
            exit 0
        fi
    else
        files=$fx
        printf '%s\n\n' "$files"
    fi

    # read archive name
    while true; do
        printf 'Archive name (without .%s): ' $ext
        read -r aname
        aname=$(printf '%s' "$aname" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
        case "$aname" in
            *'<'*|*'>'*|*'|'*|*'\'*|*'*'*)
                printf 'Invalid archive name! Do not use characters: <, >, |, \\, *\n\n'
                ;;
            '') lf -remote "send $id echo Aborted!"
                exit 0
                ;;
            *) break ;;
        esac
    done

    # read directory name
    while true; do
        printf 'Destination directory in archive: '
        read -r adir
        adir=$(printf '%s' "$adir" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
        case "$adir" in
            *'<'*|*'>'*|*'|'*|*'\'*|*'*'*)
                printf 'Invalid directory name! Do not use characters: <, >, |, \\, *\n\n'
                ;;
            '/'*)
                printf 'Invalid directory name! Do not use absolute paths!\n\n'
                ;;
            '../'*)
                printf 'Invalid directory name! Do not use parent directory!\n\n'
                ;;
            '.'|'..')
                printf 'Invalid directory name!\n\n'
                ;;
            ''|*'/')
                break ;;
            *)  adir="$adir/";
                break ;;
        esac
    done

    tmp=$(mktemp -d) || exit 1

    # check if archive already exists
    if [ -f "$aname.$ext" ]; then
        printf "Archive $aname.$ext already exists. Update archive? [y/N] "
        read -r ans
        if [ "$ans" != "y" ] && [ "$ans" != "Y" ]; then
            lf -remote "send $id echo Aborted!"
            rm -rf $tmp
            exit 0
        fi
        if [ "$ext" = "zip" ]; then
            unzip $aname.$ext -d $tmp >/dev/null || exit 1
        else
            bsdtar -xf $aname.$ext -C $tmp >/dev/null || exit 1
        fi
        rm -rf $aname.$ext
    fi

    # compress
    [ -n "$adir" ] && mkdir -p $tmp/$adir
    parents='--parents' && [ "$mode" = "flat" ] && parents=''
    printf '%s' "$files" | tr '\n' '\0' | xargs -0 cp $parents -a -t $tmp/$adir --
    workdir=$PWD
    cd $tmp
    if [ "$ext" = "zip" ]; then
        q='' && [ -z "$verbose" ] && q='-q'
        find . -maxdepth 1 -printf "%P\n" | zip $q -r $workdir/$aname.$ext -@
    else
        find . -maxdepth 1 -printf "%P\n" | bsdtar -a${verbose}cf $workdir/$aname.$ext -T -
    fi
    cd $workdir
    rm -rf $tmp

    # select archive
    aname=$(printf '%s' "$aname" | sed 's/\\/\\\\/g;s/"/\\"/g');
    lf -remote "send reload"
    lf -remote "send $id unselect"
    lf -remote "send $id select \"$aname.$ext\""

    printf 'Done\n\nPress enter to continue'
    read -r ans
}}

cmd drag-once &dragon-drop -a -x $fx
cmd drag-stay &dragon-drop $fx

cmd drag-receive ${{
    set -f
    printf '\nWaiting url(s) or file(s) ...'
    set +e
    urls=$(dragon-drop -t -x)
    wmctrl -i -a $WINDOWID  # focus window
    set -e
    printf '\n'
    last=''
    for url in $urls; do
        case "$url" in
            file://*)
                url=${url#file://}
                url=$(python3 -c "import urllib.parse, sys; print(urllib.parse.unquote(sys.argv[1]))" "$url")
                urltype='File'
                ;;
            *)  urltype='Url'
                ;;
        esac
        name=$(basename -- "$url")
        printf '%s: %s\n' "$urltype" "$url"
        while true; do
            printf 'Save as [%s]: ' "$name"
            read -r ans
            [ -n "$ans" ] && name=$ans
            if [ -e "$name" ]; then
                printf "File already exists, overwrite? [y|N] "
                read -r ans
                if [ "$ans" = "y" ] || [ "$ans" = "Y" ]; then
                    break
                fi
            else
                break
            fi
        done
        if [ "$urltype" = "File" ]; then
            printf "Copy or move the file? [C|m] "
            read -r ans
            if [ "$ans" = "m" ] || [ "$ans" = "M" ]; then
                mv -- "$url" "$name"
            else
                cp -- "$url" "$name"
            fi
        else
            case "$url" in
                http://*|https://*|ftp://*)
                    wget -O "$name" "$url" ;;
                *)
                    curl -o "$name" "$url" ;;
            esac
        fi
        last=$(printf '%s' "$name" | sed 's/\\/\\\\/g;s/"/\\"/g');
    done
    if [ -n "$last" ]; then
        lf -remote "send reload"
        lf -remote "send $id select \"$last\""
    fi
}}

cmd download-file ${{
    set -f
    set +e
    url=$(xclip -o -selection clipboard)
    set -e
    case "$url" in
        http://*|https://*|ftp://*)
            ;;
        *) lf -remote "send $id echoerr Error: Can't fetch a download link from the clipboard!"
           exit 0
           ;;
    esac
    name=$(basename -- "$url")
    printf '\nDownload link: %s\n' "$url"
    while true; do
        printf 'Save as [%s]: ' "$name"
        read -r ans
        [ -n "$ans" ] && name=$ans
        if [ -e "$name" ]; then
            printf "File already exists, overwrite? [y|N] "
            read -r ans
            if [ "$ans" = "y" ] || [ "$ans" = "Y" ]; then
                break
            fi
        else
            break
        fi
    done
    wget -O "$name" "$url"
    name=$(printf '%s' "$name" | sed 's/\\/\\\\/g;s/"/\\"/g');
    lf -remote "send reload"
    lf -remote "send $id select \"$name\""
}}

cmd cd-media &{{
    for dir in "/run/media/$USER/" "/media/$USER" "/run/media" "/media"; do
        if [ -d "$dir" ]; then
            lf -remote "send $id cd \"$dir\""
            exit 0
        fi
    done
}}

cmd ca %{{
    if [ $# -eq 0 ]; then
        result=$HOME
    elif [ $# -eq 1 ] && [ -d "$1" ]; then
        result=$1
    else
        result="$(zoxide query --exclude $PWD -- $@)"
    fi
    lf -remote "send $id cd $result"
}}

cmd ci ${{
    set +e
    if [ $# -eq 1 ] && [ -d "$1" ]; then
        result=$1
    else
        result="$(zoxide query -i --exclude $PWD -- $@)"
        if [ $? -eq 1 ]; then
            lf -remote "send echo zoxide: no match found"
            exit
        fi
    fi
    [ -z "$result" ] || lf -remote "send $id cd $result"
}}

cmd ls !echo "\nls $(pwd | sed "s|$HOME|~|")";ls --color=auto --group-directories-first -alFh
cmd sudolf $sudo -E lf
cmd sudorm $sudo rm -r -i -- $fx
cmd q quit-and-cd

# Remove some defaults
map c
map m
map t
map J
map K

# Basic Functions
map . set hidden!
map * mark-remove
map C clear
map cc clear
map cd push :cd<space>
map ca push :ca<space>
map ci push :ci<space>
map cm push :chmod<space>
map co push :chown<space>
map csm push :sudochmod<space>
map D trash_put
map <a-d> trash_restore
map <enter> open
map i $set -f; LESSOPEN='| ~/.config/lf/preview %s 0 0 0 0 verbose' less -R $f
map <a-m> mark-save
map mm mark-save
map md push :mkdir<space>
map mf push :mkfile<space>
map msd push :sudomkdir<space>
map msf push :sudomkfile<space>
map <c-o> open-new-terminal
map o push :open-with<space>
map O push :open-with<space>pkexec<space>
map P link
map p paste-check
map <a-p> paste
map <c-r> :on-cd; reload
map R delete
map T tag-toggle
map U unselect
map q quit-and-cd
map Q quit

# Applications
map bc open-config
map br bulkrename
map e $set -f; case "$EDITOR" in ?vim) $EDITOR -p $fx;; *) $EDITOR $fx;; esac
map E sudoedit
map <a-e> suedit
map I open-with nsxiv

# Navigation
map <a-c> fzf_jump
map <a-j> :updir; set dironly true; down; set dironly false; open
map <a-k> :updir; set dironly true; up; set dironly false; open
map J push 5j
map K push 5k
map , find-next
map ; find-prev

# Preview and ratios
map spd :set nopreview
map spe :set preview
map sr1 :set nopreview; set ratios 1
map sr2 :set ratios 2:3; set preview
map sr3 :set ratios 1:2:3; set preview
map sr4 :set ratios 1:2:3:5; set preview

# Drag and drop
map to drag-once
map ts drag-stay
map tr drag-receive
map td download-file

# Archive Mappings
map at compress tar
map ag compress tar.gz
map ax compress tar.xz
map as compress tar.zst
map az compress zip
map aT compress tar --flat
map aG compress tar.gz --flat
map aX compress tar.xz --flat
map aS compress tar.zst --flat
map aZ compress zip --flat
map au unarchive-to
map aU unarchive-here

# Movement
map gd cd ~/Documents
map gD cd ~/Downloads
map gm cd ~/Music
map gp cd ~/Pictures
map gr cd ~/repos
map gv cd ~/Videos
map gM cd-media
map g.b cd ~/.backups
map g.c cd ~/.config
map g.d cd ~/.dwm
map g.l cd ~/.local
map gtr cd ~/.local/share/Trash/files

# Wait till lf server is up and running and update the prompt
${{
    icons="icons" && [ -z "${DISPLAY:-}" ] && icons="noicons" # no icons on tty/ssh
    for i in 1 2 3 4 5 6 7 8 9 10; do
        [ -z "$(lf -remote "send $id set $icons" 2>&1)" ] && break || sleep 0.2
    done
}}
:on-cd
