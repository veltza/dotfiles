/*** Constants ***/

define pi_const() {
    pi1_4=a(1)     /* pi/4  */
    pi1_2=2*pi1_4  /* pi/2  */
    pi3_2=6*pi1_4  /* 3pi/2 */
    pi2=8*pi1_4    /* 2pi   */
    pi=4*pi1_4     /* pi    */
    return pi
}
pi=pi_const()
e=e(1)


/*** Trigonometric functions ***/

define acos(x) {
    return atan2(sqrt(1-x*x), x)
}

define acot(x) {
    return atan2(1, x)
}

define asin(x) {
    return atan2(x, sqrt(1-x*x))
}

define atan(x) {
    return atan2(x, 1)
}

define atan2(y, x) {
    if (y == 0) {
        if (x >= 0) return 0 else return pi
    }
    if (x == 0) {
        if (y >= 0) return pi1_2 else return -pi1_2
    }
    if (x < 0) {
        if (y >= 0) return a(y/x)+pi else return a(y/x)-pi
    }
    return a(y/x)
}

define bessel(n, x) {
    return j(n,x)
}

define cos(x) {
    auto ax
    ax=abs(x)
    if (ax == pi) return -1
    if (ax == pi2) return 1
    if (ax == pi1_2 || ax == pi3_2) return 0
    return c(x)
} 

define cot(x) {
    auto y
    y=sin(x)
    if (x == pi1_4) return 1
    if (x == -pi1_4) return -1
    if (y == 0) { if (x < 0) return -(A^scale) else return A^scale }
    return cos(x)/y
} 

define sin(x) {
    auto ax
    ax=abs(x)
    if (ax == pi || ax == pi2) return 0
    if (x == pi1_2 || x == -pi3_2) return 1
    if (x == -pi1_2 || x == pi3_2) return -1
    return s(x)
}

define tan(x) {
    auto y
    y=cos(x)
    if (x == pi1_4) return 1
    if (x == -pi1_4) return -1
    if (y == 0) { if (x < 0) return -(A^scale) else return A^scale }
    return sin(x)/y
}


/*** Misc functions ***/

define abs(x) {
    if (x < 0) return -x
    return x
}

define cbrt(x) {
    auto y
    if (x == 0) return 0
    if (x < 0) return -cbrt(-x)
    scale=scale+5
    y=e(l(x)/3)
    y=y+0.5*A^(-scale+5)
    scale=scale-5
    return y/1
}

define ceil(x) {
    auto y
    y=trunc(x)
    if (x > y) y=y+1
    return y
}

define clamp(x, lo, hi) {
    return min(max(x, lo), hi)
}

define deg(rad) {
    return rad/pi*180
}

define exp(x) {
    return e(x)
}

define fact(x) {
    auto n
    if (x < 0 || scale(x) != 0) {
        print "factorial: number must be positive integer\n"
        return 0
    }
    for (n=1; x>1; --x) n=n*x
    return n
}

define floor(x) {
    return -ceil(-x)
}

define frac(x) {
    return x-trunc(x)
}

define int(x) {
    return trunc(x)
}

define ln(x) {
    return l(x)
}

define lg(x) {
    return l(x)/l(10)
}

define log(x) {
    return l(x)
}

define log2(x) {
    return l(x)/l(2)
}

define log10(x) {
    return l(x)/l(10)
}

define max(x, y) {
    if (x > y) return x
    return y
}

define min(x, y) {
    if (x < y) return x
    return y
}

define mod(x, y) {
    return x-(y*trunc(x/y))
}

define trunc(x) {
    auto s
    s=scale
    scale=0
    x=x/1
    scale=s
    return x
}

define pow(x, n) {
    if (scale(n) == 0) return x^n
    if (x == 0) return 0
    return e(n*l(x))
}

define rad(deg) {
    return deg/180*pi
}

define round(x, n) {
    auto s
    s=scale
    scale=n+1
    if (x >= 0) {
        x=x+0.5*A^-n
    } else {
        x=x-0.5*A^-n
    }
    scale=n
    x=x/1
    scale=s
    return x
}

define sgn(x) {
    if (x == 0) return 0
    if (x < 0) return -1
    return 1
}


/*** Boolean algebra (and, not, or, xor) ***/

booleanbits=64

define and(a, b) {
    auto c,s,bit
    s=scale
    scale=0
    a/=1; b/=1
    if (a < 0) a=(2^booleanbits)+a
    if (b < 0) b=(2^booleanbits)+b
    if (a < b) { c=a; a=b; b=c; }
    c=0
    bit=1
    while (b > 0) {
        if (a%2 == 1 && b%2 == 1) c+=bit
        a/=2; b/=2
        bit*=2
    }
    if (obase == A && c >= 2^(booleanbits-1)) c-=2^booleanbits
    scale=s
    return c
}

define not(a) {
    auto c,n,s,bit
    s=scale
    scale=0
    a/=1
    if (a < 0) a=(2^booleanbits)+a
    c=0
    n=2^booleanbits
    bit=1
    while (bit < n) {
        if (a%2 == 0) c+=bit
        a/=2
        bit*=2
    }
    if (obase == A && c >= 2^(booleanbits-1)) c-=2^booleanbits
    scale=s
    return c
}

define or(a, b) {
    auto c,s,bit
    s=scale
    scale=0
    a/=1; b/=1
    if (a < 0) a=(2^booleanbits)+a
    if (b < 0) b=(2^booleanbits)+b
    if (a < b) { c=a; a=b; b=c; }
    c=a
    bit=1
    while (b > 0) {
        if (a%2 == 0 && b%2 == 1) c+=bit
        a/=2; b/=2
        bit*=2
    }
    if (obase == A && c >= 2^(booleanbits-1)) c-=2^booleanbits
    scale=s
    return c
}

define xor(a, b) {
    auto c,s,bit
    s=scale
    scale=0
    a/=1; b/=1
    if (a < 0) a=(2^booleanbits)+a
    if (b < 0) b=(2^booleanbits)+b
    if (a < b) { c=a; a=b; b=c; }
    c=a
    bit=1
    while (b > 0) {
        if (a%2 == 0 && b%2 == 1) {
            c+=bit
        } else if (a%2 == 1 && b%2 == 1) {
            c-=bit
        }
        a/=2; b/=2
        bit*=2
    }
    if (obase == A && c >= 2^(booleanbits-1)) c-=2^booleanbits
    scale=s
    return c
}


/*** Boolean algebra (bit shifting) ***/

/* rotate left */
define lror(a, n) {
    auto s,sign
    s=scale
    scale=0
    a/=1
    n/=1
    if (a < 0) a=(2^booleanbits)+a
    if (n < 0) n=-n
    sign=2^(booleanbits-1)
    while (n > 0) {
        if (a >= sign) {
            a=(a-sign)*2+1
        } else {
            a*=2
        }
        n-=1
    }
    if (obase == A && a >= 2^(booleanbits-1)) a-=2^booleanbits
    scale=s
    return a
}

/* rotate right */
define rror(a, n) {
    auto s,sign
    s=scale
    scale=0
    a/=1
    n/=1
    if (a < 0) a=(2^booleanbits)+a
    if (n < 0) n=-n
    sign=2^(booleanbits-1)
    while (n > 0) {
        if (a%2 == 1) {
            a=a/2+sign
        } else {
            a/=2
        }
        n-=1
    }
    if (obase == A && a >= 2^(booleanbits-1)) a-=2^booleanbits
    scale=s
    return a
}

/* arithmetic left shift */
define lshift(a, n) {
    auto s,sign
    s=scale
    scale=0
    a/=1
    n/=1
    if (a < 0) a=(2^booleanbits)+a
    if (n < 0) n=-n
    sign=2^(booleanbits-1)
    while (n > 0) {
        if (a >= sign) a-=sign
        a*=2
        n-=1
    }
    if (obase == A && a >= 2^(booleanbits-1)) a-=2^booleanbits
    scale=s
    return a
}

/* arithmetic right shift */
define rshift(a, n) {
    auto s,sign
    s=scale
    scale=0
    a/=1
    n/=1
    if (a < 0) a=(2^booleanbits)+a
    if (n < 0) n=-n
    sign=2^(booleanbits-1); if (a < sign) sign=0
    while (n > 0) {
        a=a/2+sign
        n-=1
    }
    if (obase == A && a >= 2^(booleanbits-1)) a-=2^booleanbits
    scale=s
    return a
}

